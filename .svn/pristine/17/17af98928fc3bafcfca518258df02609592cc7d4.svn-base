/*
 * (c) 2022 Bodo Zunker. All rights reserved.
 * created 08.02.2022
 */
package bzr.demo.concurrency.examples;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

/**
 * @author bodo
 *
 */
@TestMethodOrder( OrderAnnotation.class )
class StableStateTest extends BaseTest
{

	private ComplexState complexStateInstance;

	@BeforeAll
	static void setup()
	{
		initPool( ComplexState.POOL_SIZE );
	}

	@BeforeEach
	void initEveryTest()
	{
		complexStateInstance = new ComplexState();
		Logger.info( "" );
		initTest();
	}

	@AfterEach
	void afterEveryTest()
	{
		Logger.info( "Dauer: " + (System.nanoTime() - startTimeNs) / 1000L + " Î¼s" );
		Logger.info( "" );
	}

	@AfterAll
	static void shutdown()
	{
		pool.shutdown();
	}

	@Test
	@Order( 1 )
	void happilyNaive()
	{
		Logger.info( "happilyNaive" );
		for( int i = 0; i < ComplexState.TEST_SIZE; i++ )
		{
			futures.add( pool.submit( complexStateInstance::happilyNaive ) );
		}
		Logger.info( "inbetween: " + complexStateInstance.atomicCounter.get() );

		waitForFuture();

		Logger.info( "result: " + complexStateInstance.atomicCounter.get() );
		assertEquals( ComplexState.TEST_SIZE * ComplexState.REPEAT_COUNT,
				complexStateInstance.atomicCounter.get() );
	}

	@Test
	@Order( 2 )
	void butNowWereSaveRight()
	{
		Logger.info( "butNowWe'reSaveRight" );
		for( int i = 0; i < ComplexState.TEST_SIZE; i++ )
		{
			futures.add( pool.submit( complexStateInstance::butNowWereSaveRight ) );
		}
		Logger.info( "inbetween: " + complexStateInstance.atomicCounter.get() );

		waitForFuture();

		Logger.info( "result: " + complexStateInstance.atomicCounter.get() );
		assertEquals( ComplexState.TEST_SIZE * ComplexState.REPEAT_COUNT,
				complexStateInstance.atomicCounter.get() );
	}

	@Test
	@Order( 3 )
	void hasToWorkFinally()
	{
		Logger.info( "hasToWorkFinally" );
		for( int i = 0; i < ComplexState.TEST_SIZE; i++ )
		{
			futures.add( pool.submit( complexStateInstance::hasToWorkFinally ) );
		}
		Logger.info( "inbetween: " + complexStateInstance.atomicCounter.get() );

		waitForFuture();

		Logger.info( "result: " + complexStateInstance.atomicCounter.get() );
		assertEquals( ComplexState.TEST_SIZE * ComplexState.REPEAT_COUNT,
				complexStateInstance.atomicCounter.get() );
	}

	@Test
	@Order( 4 )
	void localOnly()
	{
		Logger.info( "localOnly" );
		for( int i = 0; i < ComplexState.TEST_SIZE; i++ )
		{
			futures.add( pool.submit( complexStateInstance::localOnly ) );
		}
		Logger.info( "inbetween: " + complexStateInstance.atomicCounter.get() );

		waitForFuture();

		Logger.info( "result: " + complexStateInstance.atomicCounter.get() );
		assertEquals( ComplexState.TEST_SIZE * ComplexState.REPEAT_COUNT,
				complexStateInstance.atomicCounter.get() );
	}

}
