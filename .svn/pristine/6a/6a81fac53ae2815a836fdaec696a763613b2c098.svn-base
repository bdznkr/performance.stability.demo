/*
 * (c) 2022 Bodo Zunker. All rights reserved.
 * created 14.02.2022
 */
package bzr.demo.concurrency.examples;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * @author bodo
 *
 */
public class MasterClass
{
	public static final int POOL_SIZE = 10;
	public static final int TEST_SIZE = 1;
	public static final int REPEAT_COUNT = 1000;

	public static void main( final String[] args )
	{

		runState();
	}

	static boolean runState()
	{
		ExecutorService pool = Executors.newFixedThreadPool( POOL_SIZE );

		ComplexState complexStateInstance = new ComplexState();
		Logger.info( "" );

		Logger.info( "happilyNaive" );
		for( int i = 0; i < TEST_SIZE; i++ )
		{
			pool.submit( complexStateInstance::happilyNaive );
		}
		Logger.info( "inbetween: " + complexStateInstance.atomicCounter.get() );

		Logger.info( "result: " + complexStateInstance.atomicCounter.get() );

		Logger.info( "butNowWe'reSaveRight" );
		for( int i = 0; i < TEST_SIZE; i++ )
		{
			pool.submit( complexStateInstance::butNowWereSaveRight );
		}
		Logger.info( "inbetween: " + complexStateInstance.atomicCounter.get() );

		Logger.info( "result: " + complexStateInstance.atomicCounter.get() );

		Logger.info( "hasToWorkFinally" );
		for( int i = 0; i < TEST_SIZE; i++ )
		{
			pool.submit( complexStateInstance::hasToWorkFinally );
		}
		Logger.info( "inbetween: " + complexStateInstance.atomicCounter.get() );

		Logger.info( "result: " + complexStateInstance.atomicCounter.get() );

		Logger.info( "localOnly" );
		for( int i = 0; i < TEST_SIZE; i++ )
		{
			pool.submit( complexStateInstance::localOnly );
		}
		Logger.info( "inbetween: " + complexStateInstance.atomicCounter.get() );

		Logger.info( "result: " + complexStateInstance.atomicCounter.get() );

		return true;

	}

}
