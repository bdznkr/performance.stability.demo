/*
 * (c) 2022 Bodo Zunker. All rights reserved.
 * created 14.02.2022
 */
package bzr.demo.concurrency.examples;

import java.util.ArrayList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * @author bodo
 *
 */
public class BaseTest
{

	protected ArrayList<Future<?>> futures;

	protected static ExecutorService pool;

	protected long startTimeNs;

	/**
	 * @throws ExecutionException
	 * @throws InterruptedException
	 * 
	 */
	protected void waitForFuture()
	{
		ExecutionException lastEx = null;
		for( Future<?> future : futures )
		{
			try
			{
				future.get();
			}catch( InterruptedException e )
			{
				Thread.currentThread().interrupt();
			}catch( ExecutionException e )
			{
				Logger.info( e.toString() );
				lastEx = e;
			}
		}
		if( lastEx != null )
			throw new RuntimeException( lastEx );
	}

	static void initPool( final int poolSize )
	{
		pool = Executors.newFixedThreadPool( poolSize );
		for( int i = 0; i < poolSize; i++ )
		{
			pool.submit( () -> {
				try
				{
					Thread.sleep( 10 );
				}catch( InterruptedException e )
				{
					Thread.currentThread().interrupt();
				}
			} );

		}
	}

	void initTest()
	{
		futures = new ArrayList<>();
		startTimeNs = System.nanoTime();
	}

}
